# Generated by Django 4.2.13 on 2025-08-27 23:47

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('music', '0005_alter_vocalprofile_note_max_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserPreferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preferred_energy', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('preferred_valence', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('preferred_tempo', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('preferred_danceability', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('preferred_acousticness', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('favorite_genres', models.JSONField(default=list, help_text="User's favorite genre tags")),
                ('favorite_moods', models.JSONField(default=list, help_text="User's favorite mood tags")),
                ('exploration_level', models.FloatField(default=0.3, help_text='How much to explore (0=safe, 1=adventurous)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='music_preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Preference',
                'verbose_name_plural': 'User Preferences',
            },
        ),
        migrations.CreateModel(
            name='TrackSimilarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cosine_similarity', models.FloatField(help_text='Cosine similarity of feature vectors', validators=[django.core.validators.MinValueValidator(-1.0), django.core.validators.MaxValueValidator(1.0)])),
                ('tag_similarity', models.FloatField(help_text='Jaccard similarity of tags', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('combined_similarity', models.FloatField(help_text='Weighted combination of all similarities', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('calculated_at', models.DateTimeField(auto_now=True)),
                ('track_a', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarities_as_a', to='music.track')),
                ('track_b', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarities_as_b', to='music.track')),
            ],
            options={
                'verbose_name': 'Track Similarity',
                'verbose_name_plural': 'Track Similarities',
                'indexes': [models.Index(fields=['track_a', 'combined_similarity'], name='music_track_track_a_cdd900_idx'), models.Index(fields=['track_b', 'combined_similarity'], name='music_track_track_b_b2f83e_idx')],
                'unique_together': {('track_a', 'track_b')},
            },
        ),
        migrations.CreateModel(
            name='SimpleTrackFeatures',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('energy', models.FloatField(help_text='Energy level (0=low, 1=high)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('valence', models.FloatField(help_text='Musical positiveness (0=sad, 1=happy)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('tempo_normalized', models.FloatField(help_text='Normalized tempo (0=slow, 1=fast)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('danceability', models.FloatField(help_text='How suitable for dancing', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('acousticness', models.FloatField(help_text='Confidence of acoustic nature', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('genre_tags', models.JSONField(default=list, help_text='List of genre tags from Last.fm')),
                ('mood_tags', models.JSONField(default=list, help_text='List of mood/style tags')),
                ('popularity_score', models.FloatField(default=0.0, help_text='Normalized popularity (0=unknown, 1=very popular)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_calculated', models.DateTimeField(blank=True, null=True)),
                ('track', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='simple_features', to='music.track')),
            ],
            options={
                'verbose_name': 'Simple Track Feature',
                'verbose_name_plural': 'Simple Track Features',
                'indexes': [models.Index(fields=['energy', 'valence'], name='music_simpl_energy_75c427_idx'), models.Index(fields=['tempo_normalized'], name='music_simpl_tempo_n_6772cd_idx'), models.Index(fields=['popularity_score'], name='music_simpl_popular_14013d_idx')],
            },
        ),
        migrations.CreateModel(
            name='RecommendationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method', models.CharField(choices=[('content_based', 'Content-Based'), ('collaborative', 'Collaborative'), ('hybrid', 'Hybrid'), ('popularity', 'Popularity-Based')], max_length=50)),
                ('similarity_threshold', models.FloatField(default=0.5)),
                ('exploration_level', models.FloatField(default=0.3)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recommended_tracks', models.ManyToManyField(related_name='recommended_in_logs', to='music.track')),
                ('seed_track', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='seed_for_recommendations', to='music.track')),
                ('tracks_played', models.ManyToManyField(blank=True, related_name='played_from_recommendations', to='music.track')),
                ('tracks_skipped', models.ManyToManyField(blank=True, related_name='skipped_from_recommendations', to='music.track')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Recommendation Log',
                'verbose_name_plural': 'Recommendation Logs',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', '-created_at'], name='music_recom_user_id_52e0d4_idx'), models.Index(fields=['method', '-created_at'], name='music_recom_method_7b14ef_idx')],
            },
        ),
    ]
